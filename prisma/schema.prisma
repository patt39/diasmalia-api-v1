// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  id             String         @id @default(uuid())
  email          String         @unique
  organizationId String?
  password       String?
  token          String?
  provider       String?
  isConfirmed    Boolean        @default(false)
  confirmedAt    DateTime?
  profile        Profile?
  organization   Organization?
  contributors   Contributor[]
  authProviders  AuthProvider[]
  assignTypes    AssignType[]
  activityLogs   ActivityLog[]
  suggestions    Suggestion[]
}

model Contributor {
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  deletedAt      DateTime?
  id             String                  @id @default(uuid())
  role           RoleContributorRole
  user           User                    @relation(fields: [userId], references: [id])
  userId         String
  confirmation   ContributorConfirmation @default(CHOOSE)
  confirmedAt    DateTime?
  organizationId String
  organization   Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  tasks          Task[]
}

enum RoleContributorRole {
  ADMIN
  SUPERADMIN
}

enum ContributorConfirmation {
  NO
  YES
  CHOOSE
}

model Profile {
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  id          String    @id @default(uuid())
  firstName   String
  lastName    String?
  address     String?
  phone       String?
  photo       String?
  occupation  String?
  member      Boolean?  @default(false)
  description String?   @db.Text
  testimonial String?   @db.Text
  city        String?
  currencyId  String?   @unique
  countryId   String?   @unique
  country     Country?  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  currency    Currency? @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Currency {
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  id        String    @id @default(uuid())
  name      String
  code      String
  symbol    String
  status    Boolean   @default(false)
  profile   Profile?
}

model Image {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  link           String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

model Country {
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  id        String    @id @default(uuid())
  name      String
  code      String
  status    Boolean   @default(false)
  profile   Profile?
}

model Organization {
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?
  id               String           @id @default(uuid())
  name             String
  logo             String?
  description      String?          @db.Text
  userId           String           @unique
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  contributors     Contributor[]
  tasks            Task[]
  animals          Animal[]
  treatments       Treatment[]
  breedings        Breeding[]
  checkPregnancies CheckPregnancy[]
  farrowings       Farrowing[]
  weanings         Weaning[]
  gestations       Gestation[]
  deaths           Death[]
  milkings         Milking[]
  feedings         Feeding[]
  sellings         Sale[]
  finances         Finance[]
  locations        Location[]
  isolations       Isolation[]
  contacts         Contact[]
  assignTypes      AssignType[]
  eggHavestings    EggHavesting[]
  incubations      Incubation[]
  subscriptions    Subscription[]
  Fattenings       Fattening[]
  activityLogs     ActivityLog[]
  FeedStock        FeedStock[]
  healths          Health[]
  cages            Cage[]
  suggestions      Suggestion[]
  assignMaterials  AssignMaterial[]
  buildings        Building[]
  images           Image[]
}

model Contact {
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
  id             String        @id @default(uuid())
  email          String?
  phone          String?
  fullName       String?
  subject        String?
  description    String        @db.Text
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String?
}

model Faq {
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  id            String    @id @default(uuid())
  title         String
  description   String    @db.Text
  userCreatedId String?
}

model AuthProvider {
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  id         String    @id @default(uuid())
  email      String?
  name       String?
  providerId String?
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  title          String
  type           String
  dueDate        DateTime?
  periode        String?
  status         String?      @default("TODO")
  frequency      String?
  description    String       @db.Text
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  contributorId  String
  contributor    Contributor  @relation(fields: [contributorId], references: [id], onDelete: Cascade)
  animalTypeId   String
  animalType     AnimalType   @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

model AssignType {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  animalTypeId   String
  animalType     AnimalType   @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

model Location {
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  id              String           @id @default(uuid())
  code            String
  manger          Int?             @default(0)
  through         Int?             @default(0)
  nest            Int?
  cages           Int?
  addCages        AddCages?        @default(NO)
  status          Boolean          @default(true)
  animalTypeId    String
  animalType      AnimalType       @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  buildingId      String?
  building        Building?        @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  squareMeter     Int
  productionPhase String
  organizationId  String
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId   String
  animals         Animal[]
  assignMaterials AssignMaterial[]
}

model Building {
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  id              String           @id @default(uuid())
  code            String
  animalTypeId    String
  animalType      AnimalType       @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  squareMeter     Int
  productionPhase String
  organizationId  String
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId   String
  locations       Location[]
  assignMaterials AssignMaterial[]
}

enum AddCages {
  YES
  NO
}

model Breed {
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  id           String     @id @default(uuid())
  name         String
  animalTypeId String
  animalType   AnimalType @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  animals      Animal[]
}

model Material {
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  id              String           @id @default(uuid())
  name            String
  image           String?
  type            MaterialType?    @default(TOOL)
  assignMaterials AssignMaterial[]
}

model AssignMaterial {
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
  id             String        @id @default(uuid())
  status         Boolean       @default(false)
  materialId     String?
  type           MaterialType? @default(LOCATION)
  material       Material?     @relation(fields: [materialId], references: [id], onDelete: Cascade)
  buildingId     String?
  building       Building?     @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  locationId     String?
  location       Location?     @relation(fields: [locationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

enum MaterialType {
  LOCATION
  TOOL
}

model Animal {
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?
  id               String           @id @default(uuid())
  code             String
  codeFather       String?
  codeMother       String?
  birthday         DateTime?
  weight           Int?
  isCastrated      CastratedStatus  @default(NO)
  isIsolated       IsolatedStatus   @default(NO)
  quantity         Int?
  strain           String?
  supplier         String?
  report           String?
  gender           Gender?
  male             Int?             @default(0)
  female           Int?             @default(0)
  animalTypeId     String
  animalType       AnimalType       @relation(fields: [animalTypeId], references: [id])
  productionPhase  String
  status           AnimalStatus     @default(ACTIVE)
  locationId       String?
  location         Location?        @relation(fields: [locationId], references: [id], onDelete: Cascade)
  breedId          String?
  breed            Breed?           @relation(fields: [breedId], references: [id], onDelete: Cascade)
  organizationId   String
  organization     Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId    String
  death            Death[]
  milkings         Milking[]
  treatments       Treatment[]
  farrowings       Farrowing[]
  weanings         Weaning[]
  gestations       Gestation[]
  feedings         Feeding[]
  isolations       Isolation[]
  eggHavestings    EggHavesting[]
  checkPregnancies CheckPregnancy[]
  fattenings       Fattening[]
  sales            Sale[]
  incubations      Incubation[]
  cages            Cage[]
  suggestions      Suggestion[]
  finances         Finance[]
}

model AnimalType {
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?
  id               String           @id @default(uuid())
  name             String
  photo            String?
  slug             String?
  habitat          String?
  tab              String?
  status           AnimalTypeStatus @default(ACTIVE)
  description      String           @db.Text
  locations        Location[]
  breeds           Breed[]
  animals          Animal[]
  assignTypes      AssignType[]
  eggHavestings    EggHavesting[]
  incubations      Incubation[]
  milkings         Milking[]
  feedings         Feeding[]
  isolations       Isolation[]
  deaths           Death[]
  gestations       Gestation[]
  weanings         Weaning[]
  farrowings       Farrowing[]
  checkPregnancies CheckPregnancy[]
  breedings        Breeding[]
  treatments       Treatment[]
  fattenings       Fattening[]
  sales            Sale[]
  feedStocks       FeedStock[]
  tasks            Task[]
  cages            Cage[]
  buildings        Building[]
  finances         Finance[]
}

enum Gender {
  MALE
  FEMALE
}

enum AnimalStatus {
  DEAD
  SOLD
  ACTIVE
  STOPPED
  ARCHIVED
}

enum AnimalTypeStatus {
  ACTIVE
  DISACTIVE
}

enum CastratedStatus {
  YES
  NO
}

enum IsolatedStatus {
  YES
  NO
}

model Treatment {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  name           String?
  note           String?      @db.Text
  dose           String?
  diagnosis      String?      @db.Text
  method         String?
  healthId       String
  health         Health       @relation(fields: [healthId], references: [id], onDelete: Cascade)
  animalTypeId   String
  animalType     AnimalType   @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  animalId       String
  animal         Animal       @relation(fields: [animalId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

model Health {
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  id          String    @id @default(uuid())
  name        String
  image       String?
  description String?   @db.Text
  status      Boolean   @default(true)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  treatments     Treatment[]
}

model Cage {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  code           String
  dimension      Int
  eggHarvested   Int?         @default(0)
  death          Int?         @default(0)
  numberPerCage  Int
  animalId       String
  animal         Animal       @relation(fields: [animalId], references: [id], onDelete: Cascade)
  animalTypeId   String
  animalType     AnimalType   @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

model Breeding {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  note           String?      @db.Text
  method         String?
  result         String?
  checkStatus    Boolean      @default(false)
  animalFemaleId String
  animalMaleId   String
  femaleCode     String
  maleCode       String
  animalTypeId   String
  animalType     AnimalType   @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  gestations     Gestation[]
  farrowings     Farrowing[]
  weanings       Weaning[]
}

model CheckPregnancy {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  result         String
  animalId       String
  animal         Animal       @relation(fields: [animalId], references: [id], onDelete: Cascade)
  animalTypeId   String
  animalType     AnimalType   @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  gestations     Gestation[]
}

model Farrowing {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  note           String?      @db.Text
  litter         Int?
  weight         Int?
  dead           Int?
  image          String?
  farrowingDate  DateTime?
  animalTypeId   String
  animalType     AnimalType   @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  animalId       String
  animal         Animal       @relation(fields: [animalId], references: [id], onDelete: Cascade)
  breedingId     String?
  breeding       Breeding?    @relation(fields: [breedingId], references: [id], onDelete: Cascade)
  weanings       Weaning[]
}

model Weaning {
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  deletedAt       DateTime?
  id              String       @id @default(uuid())
  litter          Int?
  farrowingLitter Int?
  weight          Int?
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId   String
  animalTypeId    String
  animalType      AnimalType   @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  animalId        String
  animal          Animal       @relation(fields: [animalId], references: [id], onDelete: Cascade)
  farrowingId     String
  farrowing       Farrowing    @relation(fields: [farrowingId], references: [id], onDelete: Cascade)
  breedingId      String?
  breeding        Breeding?    @relation(fields: [breedingId], references: [id], onDelete: Cascade)
}

model Gestation {
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deletedAt        DateTime?
  id               String          @id @default(uuid())
  note             String?         @db.Text
  method           String
  farrowingDate    DateTime?
  animalTypeId     String
  animalType       AnimalType      @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  animalId         String
  animal           Animal          @relation(fields: [animalId], references: [id], onDelete: Cascade)
  breedingId       String?
  breeding         Breeding?       @relation(fields: [breedingId], references: [id], onDelete: Cascade)
  checkPregnancyId String?
  checkPregnancy   CheckPregnancy? @relation(fields: [checkPregnancyId], references: [id], onDelete: Cascade)
  organizationId   String
  organization     Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId    String
}

model Death {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  number         Int?
  note           String?      @db.Text
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  animalTypeId   String
  animalType     AnimalType   @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  animalId       String
  animal         Animal       @relation(fields: [animalId], references: [id], onDelete: Cascade)
}

model Milking {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  quantity       Int
  note           String?      @db.Text
  animalTypeId   String
  animalType     AnimalType   @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  animalId       String
  animal         Animal       @relation(fields: [animalId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

model Feeding {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  quantity       Int?
  feedStockId    String
  feedStock      FeedStock    @relation(fields: [feedStockId], references: [id], onDelete: Cascade)
  animalTypeId   String
  animalType     AnimalType   @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  animalId       String
  animal         Animal       @relation(fields: [animalId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

model FeedStock {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  number         Int?         @default(0)
  weight         Int
  bagWeight      Int?         @default(0)
  composition    Json?
  feedCategory   String
  animalTypeName String
  animalTypeId   String
  animalType     AnimalType   @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  feedings       Feeding[]
}

model Sale {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  note           String?      @db.Text
  phone          String?
  email          String?
  address        String?
  code           String?
  type           String
  price          Int
  number         Int?
  male           Int?         @default(0)
  female         Int?         @default(0)
  animals        Json?
  soldTo         String?
  salePdf        String?
  method         String?
  detail         String?      @default("CHICKENS")
  animalId       String?
  animal         Animal?      @relation(fields: [animalId], references: [id], onDelete: Cascade)
  animalTypeId   String
  animalType     AnimalType   @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

model Finance {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  type           String
  amount         Int?
  detail         String?
  animalId       String?
  animal         Animal?      @relation(fields: [animalId], references: [id], onDelete: Cascade)
  animalTypeId   String?
  animalType     AnimalType?  @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

model Isolation {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  note           String?      @db.Text
  number         Int?
  male           Int?         @default(0)
  female         Int?         @default(0)
  animalTypeId   String
  animalType     AnimalType   @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  animalId       String
  animal         Animal       @relation(fields: [animalId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

model Fattening {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  initialWeight  Int
  actualWeight   Int?
  animalTypeId   String
  animalType     AnimalType   @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  animalId       String
  animal         Animal       @relation(fields: [animalId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

model EggHavesting {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  quantity       Int
  size           String
  animalId       String
  animal         Animal       @relation(fields: [animalId], references: [id], onDelete: Cascade)
  animalTypeId   String
  animalType     AnimalType   @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

model Incubation {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  quantityStart  Int
  quantityEnd    Int?         @default(0)
  dueDate        DateTime?
  animalId       String
  animal         Animal       @relation(fields: [animalId], references: [id], onDelete: Cascade)
  animalTypeId   String
  animalType     AnimalType   @relation(fields: [animalTypeId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

model ActivityLog {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  message        String
  ipAddress      String?
  userAgent      String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Suggestion {
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  id             String    @id @default(uuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  message        String
  title          String
  organizationId String

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  animalId     String?
  animal       Animal?      @relation(fields: [animalId], references: [id], onDelete: Cascade)
}

model Subscription {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  isSubscribed   Boolean      @default(true)
  type           String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Blog {
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  id            String    @id @default(uuid())
  title         String?
  description   String    @db.Text
  image         String?
  slug          String?
  type          Type?     @default(BLOG)
  status        Status?   @default(PUBLIC)
  readingTime   String?
  category      Category
  urlMedia      String?
  userCreatedId String
}

enum Type {
  BLOG
  POLICY_PRIVACY
  TERM_CONDITIONS
}

enum Status {
  PRIVATE
  PUBLIC
}

enum Category {
  CARE
  HEALTH
  BREEDING
  NUTRITION
  MANAGEMENT
}
